AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless Multi-tenancy
  SAM Template showing reference architecture for a serverless multi-tenant application using a State Parks API

Parameters:
  TableName:
    Type: String
    Default: parks
  GSI1:
    Type: String
    Default: GSI1
  JwtSecret:
    Type: String
  Stage:
    Type: String
    Default: dev

Globals:
  Function:
    Runtime: nodejs16.x
    Architectures:
      - arm64
    Tracing: Active
    MemorySize: 768
    Timeout: 3
    Handler: index.handler
    Layers:
      - !Ref DependencyLayer
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  Api:
    Cors:
      AllowMethods: "'DELETE,GET,POST,PUT,PATCH'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs16.x
    Properties:
      LayerName: parks-dependency-layer
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs16.x

  ParksApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: false
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 10
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  UsersApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: false
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 10
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./users-openapi.yaml

  ParkTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: !Ref GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  JwtSignatureSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: JwtSignatureSecret
      Description: Secret for Authorizer JWT Signature
      SecretString:
        Fn::Sub:
          - |-
            {
              "signature": "${signature}"
            }
          - signature: !Ref JwtSecret

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:      
      CodeUri: functions/authorizer
      Environment:
        Variables:
          JWT_SIGNATURE_SECRET: !Ref JwtSignatureSecret
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref JwtSignatureSecret
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}

  GetParksRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: GetParksPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:query
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/${GSI1}

  CreateJwtFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateJwtFunction
      CodeUri: functions/create-jwt
      Environment:
        Variables:
          JWT_SIGNATURE_SECRET: !Ref JwtSignatureSecret
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref JwtSignatureSecret

  GenerateRolePoliciesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GenerateRolePolicies
      CodeUri: functions/generate-role-policies
      Environment:
        Variables:
          PARK_API: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ParksApi}/${Stage}
          USER_API: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${UsersApi}/${Stage}
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}

  SubscribeWebhookStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/subscribe-webhook.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        SnsSubscribe: !Sub arn:${AWS::Partition}:states:::aws-sdk:sns:subscribe
        DynamoDbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        SnsCreateTopic: !Sub arn:${AWS::Partition}:states:::aws-sdk:sns:createTopic
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: 
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action: 
                - sns:CreateTopic
                - sns:Subscribe
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"      
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SubscribeWebhookLogGroup.Arn

  SubscribeWebhookLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  SubscribeWebhookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: SubscribeWebhookPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution
                Resource: !Ref SubscribeWebhookStateMachine

  UpdateParkStatusStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/update-park-status.asl.json
      DefinitionSubstitutions:
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        SnsPublish: !Sub arn:${AWS::Partition}:states:::sns:publish
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: 
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action: 
                - sns:Publish
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"      
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt UpdateParkStatusLogGroup.Arn

  UpdateParkStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  UpdateParkStatusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: UpdateParkStatusPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution
                Resource: !Ref UpdateParkStatusStateMachine

  AddParkRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AddParkPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: 
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}

  UpdateActiveTenantFunction:
    Type: AWS::Serverless::Function
    Properties:      
      CodeUri: functions/update-active-tenant
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Events:
        UpdateTenantEvent:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /settings
            Method: PUT

  UpdateTenantRolesFunction:
    Type: AWS::Serverless::Function
    Properties:      
      CodeUri: functions/update-tenant-roles
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Events:
        UpdateTenantEvent:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /customers/{customerId}/roles
            Method: PUT

  AddTenantToUserFunction:
    Type: AWS::Serverless::Function
    Properties:      
      CodeUri: functions/add-tenant-to-user
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Events:
        UpdateTenantEvent:
          Type: Api
          Properties:
            RestApiId: !Ref UsersApi
            Path: /customers
            Method: POST

  GetTenantsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: GetTenantsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}

  GetUserSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: GetUserSettingsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}

Outputs:
  ParksApiBaseUrl:
    Description: Base url of the Parks Api. Set this value to the 'parksBaseUrl' collection variable in Postman
    Value: !Sub https://${ParksApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
  UsersApiBaseUrl:
    Description: Base url of the Users Api. Set this value to the 'usersBaseUrl' collection variable in Postman
    Value: !Sub https://${UsersApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}